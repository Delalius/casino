import React, { useState } from "react";
import "./Slots.css";

const initialBalance = 2500;
const betAmount = 50;

// –ò—Å—Ö–æ–¥–Ω—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã
const symbolValues = {
  "üçí": 2,
  "üçã": 3,
  "üçå": 4,
  "üçá": 5,
  "üçâ": 6,
  "‚≠ê": 10,
  "üîî": 15,
  "üçä": 7,
  "üçè": 8,
};

// —á–µ–º –≤—ã—à–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç, —Ç–µ–º —Ä–µ–∂–µ —Å–∏–º–≤–æ–ª –≤—ã–ø–∞–¥–∞–µ—Ç
const adjustedWeights = {};
const maxValue = Math.max(...Object.values(symbolValues));

Object.entries(symbolValues).forEach(([symbol, value]) => {
  adjustedWeights[symbol] = Math.round((maxValue / value) * 100);
});

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–∞—Å—Å–∏–≤–∞ —Å —Å–∏–º–≤–æ–ª–∞–º–∏ –ø–æ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—è–º
const weightedSymbols = Object.entries(adjustedWeights).flatMap(([symbol, weight]) =>
  Array(weight).fill(symbol)
);

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ —Å–∏–º–≤–æ–ª–∞ —Å —É—á–µ—Ç–æ–º –≤–µ—Å–æ–≤
const getSymbolWithWeight = () => {
  return weightedSymbols[Math.floor(Math.random() * weightedSymbols.length)];
};

export default function Slots() {
  const [balance, setBalance] = useState(initialBalance);
  const [grid, setGrid] = useState(Array(3).fill(null).map(() => Array(3).fill("‚ùì")));
  const [message, setMessage] = useState("–ù–∞–∂–º–∏—Ç–µ '–ö—Ä—É—Ç–∏—Ç—å' –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã!");
  const [winningCells, setWinningCells] = useState([]);

  const spinReels = () => {
    if (balance < betAmount) {
      setMessage("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!");
      return;
    }

    // –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é —Å–µ—Ç–∫—É —Å —É—á–µ—Ç–æ–º –≤–µ—Å–æ–≤
    const newGrid = [
      [getSymbolWithWeight(), getSymbolWithWeight(), getSymbolWithWeight()],
      [getSymbolWithWeight(), getSymbolWithWeight(), getSymbolWithWeight()],
      [getSymbolWithWeight(), getSymbolWithWeight(), getSymbolWithWeight()],
    ];

    console.log("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–µ—Ç–∫–∞:", newGrid);

    setGrid(newGrid);
    setBalance(balance - betAmount);
    checkWin(newGrid);
  };

  const checkWin = (newGrid) => {
    let winMultiplier = 0;
    let winCells = [];

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö —Ä—è–¥–æ–≤
    for (let i = 0; i < 3; i++) {
      const [a, b, c] = newGrid[i];
      if (a === b && b === c) {
        winMultiplier += i === 1 ? 5 : 3;
        winCells.push([i, 0], [i, 1], [i, 2]);
      }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É–ø–µ—Ä-–ø—É–ø–µ—Ä –≤—ã–∏–≥—Ä—ã—à (–≤—Å–µ 9 —è—á–µ–µ–∫ –æ–¥–∏–Ω–∞–∫–æ–≤—ã)
    const allCellsMatch = newGrid.flat().every(cell => cell === newGrid[0][0]);
    if (allCellsMatch) {
      setBalance((prev) => prev + betAmount * 50);
      setMessage("üéâ –°—É–ø–µ—Ä-–≤—ã–∏–≥—Ä—ã—à! x50 üéâ");
      setWinningCells([]);
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±–æ–ª—å—à–æ–π –≤—ã–∏–≥—Ä—ã—à (—Ä–∞–∑–Ω—ã–µ —Ä—è–¥—ã, –Ω–æ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ –∫–∞–∂–¥–æ–º)
    const rowSymbolsMatch = newGrid.every(row => row[0] === row[1] && row[1] === row[2]);
    const uniqueSymbols = new Set(newGrid.map(row => row[0]));
    if (rowSymbolsMatch && uniqueSymbols.size === 3) {
      setBalance((prev) => prev + betAmount * 20);
      setMessage("üî• –í—Å–µ —Ä—è–¥—ã –∏–º–µ—é—Ç —Å–≤–æ–π —Å–∏–º–≤–æ–ª! x20 üî•");
      setWinningCells([]);
      return;
    }

    // –í—ã–∏–≥—Ä—ã—à –Ω–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏–∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ —Å–∏–º–≤–æ–ª–æ–≤
    if (winMultiplier > 0) {
      const winningSymbol = newGrid[0][0];
      const symbolValue = symbolValues[winningSymbol] || 1;
      setBalance((prev) => prev + betAmount * symbolValue);
      setMessage(`–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏! ${betAmount * symbolValue} –º–æ–Ω–µ—Ç`);
      setWinningCells(winCells);
    } else {
      setMessage("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞!");
      setWinningCells([]);
    }
  };

  return (
    <div className="slots-page">
      <div className="slots-container">
        <h2>–ë–∞–ª–∞–Ω—Å: {balance} –º–æ–Ω–µ—Ç</h2>
        <div className="slot-grid">
          {grid.map((row, rowIndex) => (
            <div key={rowIndex} className="slot-row">
              {row.map((symbol, colIndex) => (
                <div
                  key={colIndex}
                  className={`slot-cell ${winningCells.some(cell => cell[0] === rowIndex && cell[1] === colIndex) ? "win" : ""}`}
                >
                  {symbol}
                </div>
              ))}
            </div>
          ))}
        </div>
        <button onClick={spinReels}>–ö—Ä—É—Ç–∏—Ç—å</button>
        <p>{message}</p>
      </div>
    </div>
  );
}
